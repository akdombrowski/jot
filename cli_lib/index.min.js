#!/usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lib = require("../lib");

var _clipboardy = _interopRequireDefault(require("clipboardy"));

var clipboard = _clipboardy["default"].readSync(),
    arg2 = process.argv[2],
    decode = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(o) {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _lib.jwtDecode)(o);

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function decode(_x) {
    return _ref.apply(this, arguments);
  };
}(),
    cli = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(o, r) {
    var _r;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!("-h" == r || "--help" === r)) {
              _context2.next = 4;
              break;
            }

            console.log("use -c or --clipboard or call command with no arguments to decode the JWT in you clipboard"), console.log("or call command with JWT as first argument");
            _context2.next = 22;
            break;

          case 4:
            if (!("-c" !== r && "--clipboard" !== r && r)) {
              _context2.next = 8;
              break;
            }

            if (r) try {
              console.log("Decoding: \n" + r), console.log((0, _lib.jwtDecode)(r));
            } catch (o) {
              console.error("I found an error :(."), console.error(o, o.message);
            } else console.error("I found an error :(."), console.error("Nothing in clipboard and no arguments given. Pass in a JWT as the first argument or copy a JWT to your clipboard");
            _context2.next = 22;
            break;

          case 8:
            if (!o) {
              _context2.next = 21;
              break;
            }

            _context2.prev = 9;
            _context2.next = 12;
            return decode(o);

          case 12:
            _r = _context2.sent;
            console.log("Decoding: \n" + o), console.log(_r);
            _context2.next = 19;
            break;

          case 16:
            _context2.prev = 16;
            _context2.t0 = _context2["catch"](9);
            console.error("I found an error :(."), console.error("Couldn't decode what was in clipboard. Pass in a JWT as the first argument or copy a JWT to clipboard"), console.error("what's on your clipboard? "), console.error(o), console.error(_context2.t0, _context2.t0.message);

          case 19:
            _context2.next = 22;
            break;

          case 21:
            console.error("I found an error :(."), console.error("Nothing in clipboard. Pass in a JWT as the first argument or copy a JWT to your clipboard");

          case 22:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[9, 16]]);
  }));

  return function cli(_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();

cli(clipboard, arg2);