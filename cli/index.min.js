#!/usr/bin/env node
import {jwtDecode as a,base64URLEncode as c} from"../lib";import d from"clipboardy";var e=1,f=async _a=>{try {const _temp=await a(_a);return _temp} catch (e) {throw e}},g="******HELP*****\n\
use -c or --clipboard or call command with no arguments to decode the JWT in your clipboard\n\
or call command with JWT as first argument\n\
****************",h=async (_c,_d)=>{let _e,_f;_d&&(_e=_d[2],_f=_d[3]);if(_e=="-h"||_e=="--help"){console.log(g);return g}if(_e=="-c"||_e=="--clipboard"||!_e)if(_c)try {const _temp2=await f(_c);console.log("Decoding: ");console.log(_c);console.log(_temp2);return _temp2} catch (e) {console.error("I found an error :(");console.error("Couldn't decode what was in clipboard. Pass in a JWT as the first argument or copy a JWT to your clipboard");console.error("what's on your clipboard? ");console.error(_c);throw e}else{console.error("I found an error :(");console.error("Nothing in your clipboard. Pass in a JWT as the first argument or copy a JWT to your clipboard");return e} else if(_e=="-b"||_e=="--base64url"){if(!_f){console.error("I found an error :(");console.error("No argument passed in to encode.");return e}try {const _temp3=c(_f);console.log(_temp3);return _temp3} catch (e) {console.error("I found an error :(");console.error("base64url encoding failed:",e.message);throw e}} else if(_e)try {const _temp4=a(_e);console.log(`Decoding: 
${_e}`);console.log(_temp4);return _temp4} catch (e) {console.error("I found an error :(.");console.error(e,e.message);throw e}else{console.error("I found an error :(.");console.error("Nothing in clipboard and no arguments given. Pass in a JWT as the first argument or copy a JWT to your clipboard");throw Error("Nothing in clipboard and no arguments given. Pass in a JWT as the first argument or copy a JWT to your clipboard")}},i;export{g as HELP_TEXT};export{h as cli};try {i=d.readSync()} catch {i=null}h(i,process.argv);export default h;
