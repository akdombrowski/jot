#!/usr/bin/env node
import {jwtDecode as a,base64URLEncode as b} from'../lib';import c from'clipboardy';var d=1,e=async A=>{try {return await a(A)} catch (e) {throw e}},f='******HELP*****\n\
use -c or --clipboard or call command with no arguments to decode the JWT in your clipboard\n\
or call command with JWT as first argument\n\
****************',g=async (_,B)=>{let C;let D;B&&(C=B[2],D=B[3]);if(C=='-h'||C=='--help'){console.log(f);return f}if(C=='-c'||C=='--clipboard'||!C)if(_)try {console.log('Decoding: ');console.log(_);const _a=await e(_);console.log(_a);return _a} catch (e) {console.error('I found an error :(');console.error('Couldn't decode what was in your clipboard. You might try copying the JWT again.');console.error('What's the problem? ');console.error(' ',e.message);console.error('What's on your clipboard? ');console.error(' ',_);return d}else{console.error('I found an error :(');console.error('Didn't find anything in your clipboard.');return d} else if(C=='-b'||C=='--base64url'){if(!D){console.error('I found an error :(');console.error('No argument passed in to encode.');return d}try {const _A=b(D);console.log(_A);return _A} catch (e) {console.error('I found an error :(');console.error('base64url encoding failed:',e.message)}} else if(C)try {console.log(`Decoding: 
${C}`);console.log(a(C))} catch (e) {console.error('I found an error :(.');console.error(e.message)}else{console.error('I found an error :(.');console.error('Nothing in clipboard and no arguments given. Pass in a JWT as the first argument or copy a JWT to your clipboard')}};export{f as HELP_TEXT};export{g as cli};let h;try {h=c.readSync()} catch {h=null}g(h,process.argv);export default g;
