"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.jwtEncode=exports.parseToJSON=exports.base64URLEncode=exports.createHeaderPayload=exports.hs256Verify=exports.rs256PEMVerify=exports.rs256JWKVerify=exports.rs256PEMSign=exports.rs256JWKSign=exports.hs256Sign=exports.jwtDecode=void 0;var _crypto=_interopRequireDefault(require("crypto"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var jwtDecode=function jwtDecode(jwt){try{if(!jwt.includes("."))throw new Error("Need at least one '.'");var components=jwt.split("."),header=components[0],base64URLDecodedHeader=Buffer.from(header,"base64url").toString("utf8");if(!base64URLDecodedHeader)throw console.err("base64URLDecodedHeader"),console.err(base64URLDecodedHeader),new Error("Header isn't base64url encoded");var jsonHeader=JSON.parse(base64URLDecodedHeader),typ=jsonHeader.typ,cty=jsonHeader.cty,alg=jsonHeader.alg;if(typ&&"JWT"!==typ)throw new Error("Need to be type jwt. Received: ".concat(typ));if(cty&&"JWT"!==cty)throw new Error("Need a cty of 'JWT'. Received: ".concat(cty));if(!alg)throw new Error("Missing algorithm in JOSE header.");if(3===components.length){var payload=components[1],base64urlDecodedPayload=Buffer.from(payload,"base64url").toString("utf8"),jsonPayload;return{header:jsonHeader,payload:JSON.parse(base64urlDecodedPayload),signature:components[2]}}throw new Error("Not using compact serialization (JWS).")}catch(e){return console.error(e.message,e),{header:null,payload:null,signature:null}}};exports.jwtDecode=jwtDecode;var hs256Sign=function hs256Sign(headerPayload,key){var secret=_crypto.default.createSecretKey(key,"base64url"),hmac=_crypto.default.createHmac("sha256",secret);hmac.update(headerPayload,"ascii");var hmacked=hmac.digest(),base64URLHmacked;return Buffer.from(hmacked).toString("base64url")};exports.hs256Sign=hs256Sign;var rs256JWKSign=function rs256JWKSign(headerPayload,privateKey){var hashes,secret;if(!_crypto.default.getHashes().includes("RSA-SHA256"))throw console.error("RSA-SHA256 not found"),new Error("RSA-SHA256 isn't available in the current system.");try{try{secret=JSON.parse(privateKey)}catch(e){if(!JSON.stringify(privateKey))throw new Error("Not valid JSON.");secret=privateKey}var keyObject=_crypto.default.createPrivateKey({key:secret,format:"jwk"}),sig,sigBase64URL;return _crypto.default.sign("sha256",Buffer.from(headerPayload),{key:keyObject}).toString("base64url")}catch(e){e instanceof TypeError?secret=privateKey:console.error(e.message,e)}return null};exports.rs256JWKSign=rs256JWKSign;var rs256PEMSign=function rs256PEMSign(headerPayload,privateKey,passphrase){var hashes,pemKey,sig,sigBase64URL;if(!_crypto.default.getHashes().includes("RSA-SHA256"))return console.error("RSA-SHA256 not found"),null;try{pemKey=_crypto.default.createPrivateKey({key:privateKey,format:"pem"})}catch(e){if(e instanceof TypeError&&e.message.includes("Passphrase required for encrypted key")){if(!passphrase)throw new Error("Need a passphrase since private key is encrypted");pemKey=_crypto.default.createPrivateKey({key:privateKey,format:"pem",passphrase:passphrase})}}return _crypto.default.sign("sha256",Buffer.from(headerPayload),{key:pemKey}).toString("base64url")};exports.rs256PEMSign=rs256PEMSign;var rs256JWKVerify=function rs256JWKVerify(jwt,publicKey){var jwtComponents=jwt.split("."),headerPayload=jwtComponents[0]+"."+jwtComponents[1],signature=jwtComponents[2],keyObject=_crypto.default.createPublicKey({key:publicKey,format:"jwk"}),isVerified;return _crypto.default.verify(null,Buffer.from(headerPayload,"ascii"),{key:keyObject},Buffer.from(signature,"base64url"))};exports.rs256JWKVerify=rs256JWKVerify;var rs256PEMVerify=function rs256PEMVerify(jwt,publicKey){var jwtComponents=jwt.split("."),headerPayload=jwtComponents[0]+"."+jwtComponents[1],signature=jwtComponents[2],keyObject=_crypto.default.createPublicKey({key:publicKey,format:"pem"}),isVerified;return _crypto.default.verify(null,Buffer.from(headerPayload,"ascii"),{key:keyObject},Buffer.from(signature,"base64url"))};exports.rs256PEMVerify=rs256PEMVerify;var hs256Verify=function hs256Verify(jwt,passphrase,passphraseEncoding){var jwtComponents=jwt.split("."),headerPayload=jwtComponents[0]+"."+jwtComponents[1],signature=jwtComponents[2],secret=_crypto.default.createSecretKey(passphrase,"base64url");secret=passphraseEncoding&&Buffer.isEncoding(passphraseEncoding)?_crypto.default.createSecretKey(passphrase,passphraseEncoding):_crypto.default.createSecretKey(passphrase,"base64url");var hmac=_crypto.default.createHmac("sha256",secret);hmac.update(headerPayload,"ascii");var hmacked=hmac.digest(),base64URLHmacked,isVerified;return Buffer.from(hmacked).toString("base64url")===signature};exports.hs256Verify=hs256Verify;var createHeaderPayload=function createHeaderPayload(header,payload){if(Buffer.isEncoding("base64url")){var headerBase64URL,payloadBase64URL,headerPayload;if("string"==typeof header)headerBase64URL=Buffer.from(header,"ascii").toString("base64url");else{var jsonHeader=parseToJSON(header);headerBase64URL=base64URLEncode(jsonHeader)}if("string"==typeof payload)payloadBase64URL=Buffer.from(payload,"ascii").toString("base64url");else{var jsonPayload=parseToJSON(payload);payloadBase64URL=base64URLEncode(jsonPayload)}return"".concat(headerBase64URL,".").concat(payloadBase64URL)}throw new Error("Error: Base64URL encoding isn't available.")};exports.createHeaderPayload=createHeaderPayload;var base64URLEncode=function base64URLEncode(jsonObject){if(Buffer.isEncoding("base64url")){var stringifyHeader=JSON.stringify(jsonObject),payloadBase64URL;return Buffer.from(stringifyHeader,"ascii").toString("base64url")}throw new Error("Error: Base64URL encoding isn't available")};exports.base64URLEncode=base64URLEncode;var parseToJSON=function parseToJSON(input){var json=input;if(Buffer.isEncoding("base64url"))return json=input instanceof Object?input:JSON.parse(input);throw new Error("Error: Base64URL encoding isn't available")};exports.parseToJSON=parseToJSON;var jwtEncode=function jwtEncode(header,payload,key,options){var headerBase64URL,payloadBase64URL,jsonHeader=header;if(Buffer.isEncoding("base64url")){if(header instanceof Object){jsonHeader=header;var stringifyHeader=JSON.stringify(header);headerBase64URL=Buffer.from(stringifyHeader,"ascii").toString("base64url")}else jsonHeader=JSON.parse(header),headerBase64URL=Buffer.from(header,"ascii").toString("base64url");var headerPayload=createHeaderPayload(header,payload),_jsonHeader,alg=jsonHeader.alg,sig;if(alg){switch(alg.toLowerCase()){case"hs256":sig=hs256Sign(headerPayload,key);break;case"rs256":if(!options||!options.keyFormat)throw new Error("Need to specify keyFormat in options for RS256 algorithm as either jwk or pem.");var keyFormat=options.keyFormat;"jwk"===keyFormat.toLowerCase()?sig=rs256JWKSign(headerPayload,key):"pem"===keyFormat.toLowerCase()&&(sig=options.passphrase?rs256PEMSign(headerPayload,key,options.passphrase):rs256PEMSign(headerPayload,key));break;default:throw new Error("Unsupported alg: ".concat(alg))}return headerPayload+"."+sig}throw new Error("Algorithm couldn't be determined. alg:"+alg)}throw new Error("Error: Base64URL encoding isn't available.")};exports.jwtEncode=jwtEncode;var _default=jwtDecode;exports.default=_default;