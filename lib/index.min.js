"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.jwtEncode=exports.parseToJSON=exports.base64URLEncode=exports.createHeaderPayload=exports.hs256Verify=exports.rs256PEMVerify=exports.rs256JWKVerify=exports.rs256PEMSign=exports.rs256JWKSign=exports.hs256Sign=exports.jwtDecode=void 0;var _crypto=_interopRequireDefault(require("crypto"));function _interopRequireDefault(r){return r&&r.__esModule?r:{default:r}}var jwtDecode=function(r){try{if(!r.includes("."))throw new Error("Need at least one '.'");var e=r.split("."),t=e[0],a=Buffer.from(t,"base64url").toString("utf8");if(!a)throw console.err("base64URLDecodedHeader"),console.err(a),new Error("Header isn't base64url encoded");var o=JSON.parse(a),s=o.typ,i=o.cty,n=o.alg;if(s&&"JWT"!==s)throw new Error("Need to be type jwt. Received: ".concat(s));if(i&&"JWT"!==i)throw new Error("Need a cty of 'JWT'. Received: ".concat(i));if(!n)throw new Error("Missing algorithm in JOSE header.");if(3===e.length){var f=e[1],c=Buffer.from(f,"base64url").toString("utf8");return{header:o,payload:JSON.parse(c),signature:e[2]}}throw new Error("Not using compact serialization (JWS).")}catch(r){return console.error(r.message,r),{header:null,payload:null,signature:null}}};exports.jwtDecode=jwtDecode;var hs256Sign=function(r,e){var t=_crypto.default.createSecretKey(e,"base64url"),a=_crypto.default.createHmac("sha256",t);a.update(r,"ascii");var o=a.digest();return Buffer.from(o).toString("base64url")};exports.hs256Sign=hs256Sign;var rs256JWKSign=function(r,e){var t;if(!_crypto.default.getHashes().includes("RSA-SHA256"))throw console.error("RSA-SHA256 not found"),new Error("RSA-SHA256 isn't available in the current system.");try{try{t=JSON.parse(e)}catch(r){if(!JSON.stringify(e))throw new Error("Not valid JSON.");t=e}var a=_crypto.default.createPrivateKey({key:t,format:"jwk"});return _crypto.default.sign("sha256",Buffer.from(r),{key:a}).toString("base64url")}catch(r){r instanceof TypeError?t=e:console.error(r.message,r)}return null};exports.rs256JWKSign=rs256JWKSign;var rs256PEMSign=function(r,e,t){var a;if(!_crypto.default.getHashes().includes("RSA-SHA256"))return console.error("RSA-SHA256 not found"),null;try{a=_crypto.default.createPrivateKey({key:e,format:"pem"})}catch(r){if(r instanceof TypeError&&r.message.includes("Passphrase required for encrypted key")){if(!t)throw new Error("Need a passphrase since private key is encrypted");a=_crypto.default.createPrivateKey({key:e,format:"pem",passphrase:t})}}return _crypto.default.sign("sha256",Buffer.from(r),{key:a}).toString("base64url")};exports.rs256PEMSign=rs256PEMSign;var rs256JWKVerify=function(r,e){var t=r.split("."),a=t[0]+"."+t[1],o=t[2],s=_crypto.default.createPublicKey({key:e,format:"jwk"});return _crypto.default.verify(null,Buffer.from(a,"ascii"),{key:s},Buffer.from(o,"base64url"))};exports.rs256JWKVerify=rs256JWKVerify;var rs256PEMVerify=function(r,e){var t=r.split("."),a=t[0]+"."+t[1],o=t[2],s=_crypto.default.createPublicKey({key:e,format:"pem"});return _crypto.default.verify(null,Buffer.from(a,"ascii"),{key:s},Buffer.from(o,"base64url"))};exports.rs256PEMVerify=rs256PEMVerify;var hs256Verify=function(r,e,t){var a=r.split("."),o=a[0]+"."+a[1],s=a[2],i=_crypto.default.createSecretKey(e,"base64url");i=t&&Buffer.isEncoding(t)?_crypto.default.createSecretKey(e,t):_crypto.default.createSecretKey(e,"base64url");var n=_crypto.default.createHmac("sha256",i);n.update(o,"ascii");var f=n.digest();return Buffer.from(f).toString("base64url")===s};exports.hs256Verify=hs256Verify;var createHeaderPayload=function(r,e){if(Buffer.isEncoding("base64url")){var t,a;if("string"==typeof r)t=Buffer.from(r,"ascii").toString("base64url");else{var o=parseToJSON(r);t=base64URLEncode(o)}if("string"==typeof e)a=Buffer.from(e,"ascii").toString("base64url");else{var s=parseToJSON(e);a=base64URLEncode(s)}return"".concat(t,".").concat(a)}throw new Error("Error: Base64URL encoding isn't available.")};exports.createHeaderPayload=createHeaderPayload;var base64URLEncode=function(r){if(Buffer.isEncoding("base64url")){var e=JSON.stringify(r);return Buffer.from(e,"ascii").toString("base64url")}throw new Error("Error: Base64URL encoding isn't available")};exports.base64URLEncode=base64URLEncode;var parseToJSON=function(r){if(Buffer.isEncoding("base64url"))return r instanceof Object?r:JSON.parse(r);throw new Error("Error: Base64URL encoding isn't available")};exports.parseToJSON=parseToJSON;var jwtEncode=function(r,e,t,a){var o=r;if(Buffer.isEncoding("base64url")){if(r instanceof Object){o=r;var s=JSON.stringify(r);Buffer.from(s,"ascii").toString("base64url")}else o=JSON.parse(r),Buffer.from(r,"ascii").toString("base64url");var i,n=createHeaderPayload(r,e),f=o.alg;if(f){switch(f.toLowerCase()){case"hs256":i=hs256Sign(n,t);break;case"rs256":if(!a||!a.keyFormat)throw new Error("Need to specify keyFormat in options for RS256 algorithm as either jwk or pem.");var c=a.keyFormat;"jwk"===c.toLowerCase()?i=rs256JWKSign(n,t):"pem"===c.toLowerCase()&&(i=a.passphrase?rs256PEMSign(n,t,a.passphrase):rs256PEMSign(n,t));break;default:throw new Error("Unsupported alg: ".concat(f))}return n+"."+i}throw new Error("Algorithm couldn't be determined. alg:"+f)}throw new Error("Error: Base64URL encoding isn't available.")};exports.jwtEncode=jwtEncode;var _default=jwtDecode;exports.default=_default;
