var a=a=>typeof a=='string',{defineProperty:c}=Object,e=require("@babel/runtime/helpers/interopRequireDefault")(require("crypto")),f=function _c(_a){try {if(!_a.includes("."))throw Error("Need at least one '.'");var d=_a.split("."),_e=d[0],_f=Buffer.from(_e,"base64url").toString("utf8"),_g=JSON.parse(_f);if(!_f){console.error("base64URLDecodedHeader");console.error(_f);throw Error("Header isn't base64url encoded")}var _h=_g.typ,_i=_g.cty,_j=_g.alg;if(_h&&_h!=="JWT")throw Error("Need to be type jwt. Received: ".concat(_h));if(_i&&_i!=="JWT")throw Error("Need a cty of 'JWT'. Received: ".concat(_i));if(!_j)throw Error("Missing algorithm in JOSE header.");if(d.length==3){var _k=d[1],_l=Buffer.from(_k,"base64url").toString("utf8"),_m=JSON.parse(_l);return{header:_g,payload:_m,signature:d[2]}}throw new SyntaxError("Not using compact serialization (JWS).")} catch (e) {throw e}},g=function d(_a,_c){var _f=e["default"].createHmac("sha256",e["default"].createSecretKey(_c,"base64url")),_h=Buffer.from(_f.digest()).toString("base64url");_f.update(_a,"ascii");return _h},h=function d(_a,_c){var _e=e["default"].getHashes();if(_e.includes("RSA-SHA256")){var _f;try {try {_f=JSON.parse(_c)} catch {if(JSON.stringify(_c))_f=_c;else throw Error("Not valid JSON.")}var _g=e["default"].createPrivateKey({key:_f,format:"jwk"}),_h=e["default"].sign("sha256",Buffer.from(_a),{key:_g}),_i=_h.toString("base64url");return _i} catch (e) {if(e instanceof TypeError)_f=_c;else{console.error(e.message,e);throw e}}}else{console.error("RSA-SHA256 not found");throw Error("RSA-SHA256 isn't available in the current system.")}return null},i=function _e(_a,_c,d){var _f=e["default"].getHashes(),_g,_h=e["default"].sign("sha256",Buffer.from(_a),{key:_g}),_i=_h.toString("base64url");if(!_f.includes("RSA-SHA256")){console.error("RSA-SHA256 not found");return null}try {_g=e["default"].createPrivateKey({key:_c,format:"pem"})} catch (e) {if(d)try {_g=e["default"].createPrivateKey({key:_c,format:"pem",passphrase:d})} catch (_temp) {throw Error("Failed to create the private key object needed create the RS256 signature. Tried without and with a passphrase in case the ",{cause:_temp})}else throw Error("Can't create private key object. Possibly because the key is encrypted so a passphrase was needed but none was provided or it was malformed.",{cause:e})}return _i},j=function _e(_c,d){var _f=_c.split("."),_i=e["default"].createPublicKey({key:d,format:"jwk"}),_j=e["default"].verify(null,Buffer.from(_f[0]+"."+_f[1],"ascii"),{key:_i},Buffer.from(_f[2],"base64url"));return _j},k=function _e(_c,d){var _f=_c.split("."),_i=e["default"].createPublicKey({key:d,format:"pem"}),_j=e["default"].verify(null,Buffer.from(_f[0]+"."+_f[1],"ascii"),{key:_i},Buffer.from(_f[2],"base64url"));return _j},l=function _f(_c,d,_e){var _g=_c.split("."),_i=_g[2],_k=e["default"].createHmac("sha256",e["default"].createSecretKey(d,"base64url")),_m=Buffer.from(_k.digest()).toString("base64url"),_n=_m==_i;_e&&Buffer.isEncoding(_e)?_j=e["default"].createSecretKey(d,_e):_j=e["default"].createSecretKey(d,"base64url");_k.update(_g[0]+"."+_g[1],"ascii");return _n},m=function _e(_c,d){if(Buffer.isEncoding("base64url")){var _f,_g,_j="".concat(_f,".").concat(_g);if(a(_c))_f=Buffer.from(_c,"ascii").toString("base64url");else{var _h=o(_c);_f=n(JSON.stringify(_h))}if(a(d))_g=Buffer.from(d,"ascii").toString("base64url");else{var _i=o(d);_g=n(JSON.stringify(_i))}return _j}throw Error("Error: Base64URL encoding isn't available.")},n=function d(_c){if(Buffer.isEncoding("base64url")){var _e=Buffer.from(_c,"ascii"),_f=_e.toString("base64url");return _f}if(window){var _g=window.btoa(),_h=_g(_c),_i=_h.split("=")[0];_i=_i.replace("+","-");_i=_i.replace("/","_");return _i}throw Error("Error: Base64URL encoding isn't available")},o=function d(_c){var _e=_c;if(Buffer.isEncoding("base64url")){_c instanceof Object?_e=_c:_e=JSON.parse(_c);return _e}throw Error("Error: Base64URL encoding isn't available")},p=function _g(_c,d,_e,_f){var _h=_c;if(Buffer.isEncoding("base64url")){_c instanceof Object?_h=_c:_h=JSON.parse(_c);var _i=m(_c,d),_l;var _j=_h,_k=_j.alg;if(_k){switch(_k.toLowerCase()) {case "hs256":_l=g(_i,_e);break;case "rs256":if(_f?.keyFormat){var _m=_f.keyFormat;if(_m.toLowerCase()=="jwk")_l=h(_i,_e);else _m.toLowerCase()=="pem"&&_f.passphrase?_l=i(_i,_e,_f.passphrase):_l=i(_i,_e)}else throw Error("Need to specify keyFormat in options for RS256 algorithm as either jwk or pem.");break;default:throw Error("Unsupported alg: ".concat(_k))}return _i+"."+_l}throw Error(`Algorithm couldn't be determined. alg:${_k}`)}throw Error("Error: Base64URL encoding isn't available.")},q=f;c(exports,"__esModule",{value:!0});exports.rs256PEMVerify=exports.rs256PEMSign=exports.rs256JWKVerify=exports.rs256JWKSign=exports.parseToJSON=exports.jwtEncode=exports.jwtDecode=exports.hs256Verify=exports.hs256Sign=exports["default"]=exports.createHeaderPayload=exports.base64URLEncode=void 0;exports.jwtDecode=f;exports.hs256Sign=g;exports.rs256JWKSign=h;exports.rs256PEMSign=i;exports.rs256JWKVerify=j;exports.rs256PEMVerify=k;exports.hs256Verify=l;exports.createHeaderPayload=m;exports.base64URLEncode=n;exports.parseToJSON=o;exports.jwtEncode=p;exports["default"]=q;
